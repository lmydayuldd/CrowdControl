package uk.ac.cam.bravo.CrowdControl.ui;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTException;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Shell;

import uk.ac.cam.bravo.CrowdControl.agent.AgentInterface;
import uk.ac.cam.bravo.CrowdControl.simulator.Simulator;
import uk.ac.cam.bravo.CrowdControl.simulator.forUI.SimulatorInterface;

public class CrowdControl {

	private static final int BASE_SIM_STEP_INTERVAL = 20;
	private static final float[] SIM_STEP_SPEEDS = new float[] {0.1f, 0.25f, 0.5f, 1f, 2f, 4f, 6f, 8f, 10f, 100f};
	
	private static final int[] VERTICAL_WEIGHTS = new int[] { 4, 1 };
	private static final int[] VITALS_WEIGHTS = new int[] { 5, 1 };

	private SimulatorInterface sim;
	private SimulationResult simR;
	
	private VitalsPanel vitals;
	private MapPanel map;
	private ControlsPanel controls;
	private volatile boolean stopSimulation = true;

	private Display display;
	
	private volatile int currentTime = 0;
	private volatile int currentSpeedIndex = 4;
	private volatile int currentAbsoluteSpeed = (int) (BASE_SIM_STEP_INTERVAL * SIM_STEP_SPEEDS[currentSpeedIndex]);
	
	private Shell makeGUI(final Display display) {
		this.display = display;
		Shell shell = new Shell(display);
		shell.setText(UIS.SHELL_TITLE);

		shell.setLayout(new FillLayout());

		SashForm sashShell = new SashForm(shell, SWT.HORIZONTAL);

		createMenuBar(shell, SWT.BAR);

		final Composite leftComposite = new Composite(sashShell, SWT.NONE);
		SashForm rightComposite = new SashForm(sashShell, SWT.VERTICAL);
		leftComposite.setLayout(new GridLayout());

		sashShell.setWeights(VERTICAL_WEIGHTS);

		vitals = new VitalsPanel(rightComposite, SWT.NONE, UIS.VITALS_TITLE, display);
		vitals.setEvacuateText(UIS.EVACUATE);

		vitals.addEvacuateListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				if (sim != null) {
					sim.setSimulationMode(true);
				}
			}
		});

		map = new MapPanel(leftComposite, SWT.NONE, UIS.MAP, display, new LogPanel(rightComposite, SWT.NONE, UIS.LOG, display));
		map.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		controls = new ControlsPanel(leftComposite, SWT.NONE, UIS.CONTROLS, display);
		controls.setLayoutData(new GridData(SWT.FILL, SWT.END, true, false, 1, 1));

		controls.addButtonListener(ControlsPanel.BUTTON_PLAYPAUSE, SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				buttonPlayPauseEventHandler();
			}
		});

		controls.addButtonListener(ControlsPanel.BUTTON_BEGIN, SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				currentTime = controls.minimiseProgress();
				updateUI();
			}
		});
		
		controls.addButtonListener(ControlsPanel.BUTTON_END, SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				currentTime = controls.maximiseProgress();
				updateUI();
			}
		});
		
		controls.addButtonListener(ControlsPanel.BUTTON_FASTFORWARD, SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				if (currentSpeedIndex > 0) currentAbsoluteSpeed = (int) (BASE_SIM_STEP_INTERVAL * SIM_STEP_SPEEDS[--currentSpeedIndex]);
			}
		});
		
		controls.addButtonListener(ControlsPanel.BUTTON_REWIND, SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				if (currentSpeedIndex < SIM_STEP_SPEEDS.length - 1) currentAbsoluteSpeed = (int) (BASE_SIM_STEP_INTERVAL * SIM_STEP_SPEEDS[++currentSpeedIndex]);
			}
		});
		
		controls.addProgressListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				currentTime = controls.getProgress();
				updateUI();
			}
		});

		rightComposite.setWeights(VITALS_WEIGHTS);

		return shell;
	}

	private void loadSimulation(JarFile simConfig) throws IOException {
		try {
			InputStream[] inputs = new InputStream[4];

			Enumeration<JarEntry> entries = simConfig.entries();
			while (entries.hasMoreElements()) {
				JarEntry e = entries.nextElement();
				if (e.getName().toLowerCase().endsWith(".xml"))
					inputs[Integer.parseInt(e.getName().substring(0, 1))] = simConfig.getInputStream(e);
			}
			if (!stopSimulation) {
				buttonPlayPauseEventHandler();
				stopSimulation = true;
				while(display.readAndDispatch());
			}
			sim = new Simulator(Arrays.asList(inputs));
			simR = new SimulationResult();
			
		} catch (Exception e) {
			e.printStackTrace();
			throw new IOException();
		}

		map.setBuildingPlan(sim.getBuildingPlan());
		List<AgentInterface> agents = sim.getWorldState();
		simR.addAgents(agents);
		map.setAgents(agents);

		vitals.setTime(new Integer(sim.getTimestamp()).toString());
		vitals.setPopulation(new Integer(agents.size()).toString());
	}

	private void buttonPlayPauseEventHandler() {
		// controls.getButton(ControlsPanel.BUTTON_PLAYPAUSE).setEnabled(false);
		if (sim != null) {
			controls.togglePlayPauseButton();
			if (stopSimulation) {
				stopSimulation = false;
				display.syncExec(simUpdater);
			} else {
				stopSimulation = true;
			}
		}
	}

	private void updateUI() {
		if (sim == null) return;
		for (; simR.available() < currentTime;) {
			simR.addAgents(sim.doSimulationStep());
		}
		
		List<AgentInterface> agents = simR.getAgentsAt(currentTime);
		
		vitals.setTime(new Integer(currentTime).toString());
		vitals.setPopulation(new Integer(agents.size()).toString());
		
		controls.updateProgress(simR.available(), currentTime);
		
		map.setAgents(agents);
		map.updateMap();
	}
	
	private final Runnable simUpdater = new Runnable() {
		@Override
		public void run() {
			try {
				
				updateUI();
				
				if (!stopSimulation) {
					currentTime++;
					display.timerExec(currentAbsoluteSpeed, simUpdater);
				}

			} catch (SWTException ex) {
				// TODO: This is inelegant - do it properly later
			}
		}
	};

	public void runGUI() {
		Display display = new Display();
		Shell shell = makeGUI(display);

		shell.setMaximized(true);
		shell.open();
		// Set up the event loop.
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				// If no more entries in the event queue
				display.sleep();
			}
		}
		display.dispose();
	}

	private void createMenuBar(final Shell parent, int style) {

		Menu menuBar = new Menu(parent, style);

		MenuItem cascadeFileMenu = new MenuItem(menuBar, SWT.CASCADE);
		cascadeFileMenu.setText(UIS.MENU_FILE_TITLE);
		Menu fileMenu = new Menu(parent, SWT.DROP_DOWN);
		cascadeFileMenu.setMenu(fileMenu);

		MenuItem file_loadsimconfig = new MenuItem(fileMenu, SWT.PUSH);
		file_loadsimconfig.setText(UIS.MENU_FILE_LOADSIMCONFIG);
		MenuItem file_clearItem = new MenuItem(fileMenu, SWT.PUSH);
		file_clearItem.setText(UIS.MENU_FILE_CLEAR);
		MenuItem file_exitItem = new MenuItem(fileMenu, SWT.PUSH);
		file_exitItem.setText(UIS.MENU_FILE_EXIT);

		MenuItem cascadeSimMenu = new MenuItem(menuBar, SWT.CASCADE);
		cascadeSimMenu.setText(UIS.MENU_SIM_TITLE);
		Menu simMenu = new Menu(parent, SWT.DROP_DOWN);
		cascadeSimMenu.setMenu(simMenu);

		MenuItem sim_runItem = new MenuItem(simMenu, SWT.PUSH);
		sim_runItem.setText(UIS.MENU_SIM_RUN);
		MenuItem sim_stopItem = new MenuItem(simMenu, SWT.PUSH);
		sim_stopItem.setText(UIS.MENU_SIM_STOP);

		parent.setMenuBar(menuBar);

		file_loadsimconfig.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				File f;
				if ((f = openFileDialog(parent)) != null) {
					try {
						loadSimulation(new JarFile(f));
					} catch (IOException e1) {
						new Dialog(parent, UIS.DIALOG_TITLE, UIS.DIALOG_TEXT);
					}
					System.out.println("Room data set:" + f.getName());
				}
			}
		});

		file_clearItem.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// Todo, clear simulator
			}
		});

		file_exitItem.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				((Shell) parent).getDisplay().dispose();
				System.exit(0);
			}
		});

		sim_runItem.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				buttonPlayPauseEventHandler();
			}
		});

	}

	private File openFileDialog(Shell shell) {
		FileDialog dialog = new FileDialog(shell, SWT.OPEN);

		String[] filterNames = new String[] { "Jar", "All Files (*)" };

		String[] filterExtensions = new String[] { "*.jar" };

		dialog.setFilterNames(filterNames);
		dialog.setFilterExtensions(filterExtensions);

		String path = dialog.open();

		if (path != null) {
			return new File(path);
		}
		return null;
	}

	public static void main(String[] args) {
		new CrowdControl().runGUI();
	}
}
